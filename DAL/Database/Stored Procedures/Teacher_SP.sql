/* Store Procedures TEACHER */
USE ProUTN;
GO

-- to get the next code
CREATE PROCEDURE SP_GETNEXTCODETEACHER
AS
BEGIN
	SELECT MAX(TEACHER_ID) 
	FROM TEACHER;
END;
GO

-- to return the quantity if the teacher exists in the Database
CREATE PROCEDURE SP_EXISTTEACHER
@ID NUMERIC
AS
BEGIN
	SELECT COUNT(TEACHER_ID) 
	FROM TEACHER 
	WHERE TEACHER_ID =@ID;
END;
GO

-- to insert a new teacher
CREATE PROCEDURE SP_INSERTTEACHER
@TEACHER_ID	NUMERIC,
@ID VARCHAR(15),
@NAME varchar(50),
@SURNAME varchar(50),
@PHONE varchar(15),
@CELPHONE varchar(15),
@MAIL varchar(100),
@IDPOSITION NUMERIC,
@STATE NUMERIC(1)  
AS
BEGIN
	INSERT INTO TEACHER(TEACHER_ID, ID, NAME, SURNAME, PHONE, CELEPHONE, MAIL, POSITION_ID, STATE, DELETED)
    VALUES (@TEACHER_ID, @ID, @NAME, @SURNAME, @PHONE, @CELPHONE, @MAIL, @IDPOSITION, @STATE, 1)   
END;
GO

-- to modify a teacher
CREATE PROCEDURE SP_MODIFYTEACHER
@TEACHER_ID	NUMERIC,
@ID VARCHAR(15),
@NAME varchar(50),
@SURNAME varchar(50),
@PHONE varchar(15),
@CELPHONE varchar(15),
@MAIL varchar(100),
@IDPOSITION NUMERIC,
@STATE NUMERIC(1)
AS
BEGIN
UPDATE TEACHER
   SET	ID = @ID
		,NAME = @NAME
		,SURNAME = @SURNAME
		,PHONE = @PHONE
		,CELEPHONE = @CELPHONE
		,MAIL = @MAIL
		,POSITION_ID = @IDPOSITION
		,STATE = @STATE
 WHERE TEACHER_ID =@TEACHER_ID

END;
GO 

-- to delete a specific teacher
CREATE PROCEDURE SP_DELETETEACHER
@TEACHER_ID NUMERIC
AS
BEGIN
	UPDATE TEACHER
	SET DELETED = 0
	WHERE TEACHER_ID =@TEACHER_ID;
END;
GO

-- to get all teacher registered 
CREATE PROCEDURE SP_GETALLTEACHER
AS
BEGIN
	
SELECT T.TEACHER_ID, T.ID, T.NAME,T.SURNAME,T.PHONE,T.CELEPHONE,T.MAIL,T.POSITION_ID,ID.DESCRIPTION,T.STATE
  FROM TEACHER T INNER JOIN INTERNAL_DESIGNATION ID
  ON   T.POSITION_ID= ID.DESIGNATION_ID
  WHERE T.DELETED = 1
  	
END;
GO

-- to get a specific teacher
CREATE PROCEDURE SP_GETTEACHER
@ID NUMERIC
AS
BEGIN			
  SELECT T.TEACHER_ID, T.ID, T.NAME,T.SURNAME,T.PHONE,T.CELEPHONE,T.MAIL,T.POSITION_ID,ID.DESCRIPTION,T.STATE
  FROM TEACHER T INNER JOIN INTERNAL_DESIGNATION ID
  ON   T.POSITION_ID= ID.DESIGNATION_ID
  WHERE TEACHER_ID = @ID AND
  T.DELETED = 1; 
END;
GO

-- to get all active teachers registered
CREATE PROCEDURE SP_GETALLTEACHERACTIVE
AS
BEGIN
	 SELECT T.TEACHER_ID, T.ID, T.NAME,T.SURNAME,T.PHONE,T.CELEPHONE,T.MAIL,T.POSITION_ID,ID.DESCRIPTION,T.STATE
	  FROM TEACHER T INNER JOIN INTERNAL_DESIGNATION ID
      ON   T.POSITION_ID= ID.DESIGNATION_ID
      WHERE T.STATE = 1 AND
	  T.DELETED = 1;
END;
GO
