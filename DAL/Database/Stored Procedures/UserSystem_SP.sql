
USE ProUTN;
GO

--to get last code
CREATE PROCEDURE SP_GETNEXTCODEUSERSYSTEM
AS
BEGIN
	SELECT MAX(USERSYSTEM_ID) 
	FROM USERSYSTEM;
END;
GO

--To verify if exist the user
CREATE PROCEDURE SP_EXISTUSERSYSTEM
@ID NUMERIC
AS
BEGIN
	SELECT COUNT(USERSYSTEM_ID) 
	FROM USERSYSTEM 
	WHERE USERSYSTEM_ID =@ID;
END;
GO

--insert the usersystem
drop procedure SP_INSERTUSERSYSTEM
CREATE PROCEDURE SP_INSERTUSERSYSTEM
	@USERSYSTEM_ID NUMERIC,
	@ID VARCHAR(15),
	@NAME VARCHAR(50),
	@SURNAME VARCHAR(50),
	@PHONE VARCHAR(15),
	@CELLPHONE VARCHAR(15),
	@MAIL VARCHAR(100),
	@PASSWORD VARCHAR(100),
	@ROLE_ID NUMERIC,
	@PROGRAM_ID NUMERIC=0,
	@STATE NUMERIC(1)
AS 
BEGIN
	if(@PROGRAM_ID=0)
	begin
	set @PROGRAM_ID=null
	end
	declare @pass as VarBinary(8000)
	set @pass=1
		INSERT INTO USERSYSTEM(USERSYSTEM_ID, ID, NAME, SURNAME, PHONE, CELLPHONE, MAIL,PASSWORD,PROGRAM_ID,ROLE_ID, STATE, DELETED)
	VALUES( @USERSYSTEM_ID, @ID, @NAME, @SURNAME, @PHONE, @CELLPHONE, @MAIL,dbo.fun_usu_EncriptarContrasenia('123'),@PROGRAM_ID,@ROLE_ID,@STATE, 1 );
END;
GO

--modify user
CREATE PROCEDURE SP_MODIFYUSERSYSTEM
	@USERSYSTEM_ID NUMERIC,
	@ID VARCHAR(15),
	@NAME VARCHAR(50),
	@SURNAME VARCHAR(50),
	@PHONE VARCHAR(15),
	@CELLPHONE VARCHAR(15),
	@MAIL VARCHAR(100),
	@PASSWORD VARCHAR(100),
	@ROLE_ID NUMERIC,
	@PROGRAM_ID NUMERIC=null,
	@STATE NUMERIC(1)
AS 
BEGIN
	UPDATE USERSYSTEM
	SET ID = @ID,
	NAME = @NAME,
	SURNAME = @SURNAME,
	PHONE = @PHONE,
	CELLPHONE = @CELLPHONE,
	MAIL = @MAIL,
	PASSWORD= ENCRYPTBYPASSPHRASE('password', @PASSWORD),
	ROLE_ID=@ROLE_ID,
	PROGRAM_ID=@PROGRAM_ID,
	STATE = @STATE
	WHERE USERSYSTEM_ID = @USERSYSTEM_ID; 
END;
GO

--drop function fun_usu_EncriptarContrasenia
CREATE FUNCTION fun_usu_EncriptarContrasenia(@clave VARCHAR(100))
RETURNS VarBinary(8000)
AS
BEGIN
    DECLARE @pass AS VarBinary(8000)
    ------------------------------------
    ------------------------------------
    SET @pass = ENCRYPTBYPASSPHRASE('password',@clave)
    ------------------------------------
    RETURN @pass
END