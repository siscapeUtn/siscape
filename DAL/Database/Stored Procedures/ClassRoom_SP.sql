USE ProUTN;
GO
/* ---- Store Procedures ClassRoom ---- */
--to get last code
CREATE PROCEDURE SP_GETNEXTCODECLASSROOM
AS
BEGIN
	SELECT MAX(CLASSROOM_ID) 
	FROM CLASSROOM;
END;
GO

--to check that a classroom exists
CREATE PROCEDURE SP_EXISTCLASSROOM
@ID NUMERIC
AS
BEGIN
	SELECT COUNT(CLASSROOM_ID) 
	FROM CLASSROOM 
	WHERE CLASSROOM_ID =@ID;
END;
GO

--to insert a classroom
CREATE PROCEDURE SP_INSERTCLASSROOM
@ID NUMERIC,
@NUM_ROOM VARCHAR(10),
@SIZE NUMERIC,
@CLASSROOMSTYPE NUMERIC,
@PROGRAM_ID NUMERIC,
@LOCATION_ID NUMERIC,
@STATE NUMERIC(1)  
AS
BEGIN
	INSERT INTO CLASSROOM(CLASSROOM_ID, NUM_ROOM, SIZE, CLASSROOMSTYPE_ID, PROGRAM_ID, LOCATION_ID, STATE, DELETED) 
	VALUES (@ID, @NUM_ROOM, @SIZE, @CLASSROOMSTYPE, @PROGRAM_ID, @LOCATION_ID, @STATE, 1);
END;
GO

--to modify classroom
CREATE PROCEDURE SP_MODIFYCLASSROOM
@ID NUMERIC,
@NUM_ROOM VARCHAR(10),
@SIZE NUMERIC,
@CLASSROOMSTYPE NUMERIC,
@PROGRAM_ID NUMERIC,
@LOCATION_ID NUMERIC,
@STATE NUMERIC(1)  
AS
BEGIN
	UPDATE CLASSROOM
	SET NUM_ROOM = @NUM_ROOM,
	SIZE = @SIZE,
	CLASSROOMSTYPE_ID = @CLASSROOMSTYPE,
	PROGRAM_ID = @PROGRAM_ID,
	LOCATION_ID= @LOCATION_ID,
	STATE = @STATE
	WHERE CLASSROOM_ID = @ID;
END;
GO 

-- to delete a classroom
CREATE PROCEDURE SP_DELETECLASSROOM
@CODE NUMERIC
AS
BEGIN
	UPDATE CLASSROOM
	SET DELETED = 0
	WHERE CLASSROOM_ID = @CODE
END;
GO

--to get all classroom
CREATE PROCEDURE SP_GETALLCLASSROOM
AS
BEGIN
	SELECT C.CLASSROOM_ID,C.NUM_ROOM,C.SIZE,C.PROGRAM_ID, P.NAME,C.CLASSROOMSTYPE_ID, CT.DESCRIPTION,C.LOCATION_ID,l.HEADQUARTERS_ID,h.NAME,L.BUILDING,L.MODULE ,C.STATE 
	FROM CLASSROOM C INNER JOIN PROGRAM P
	ON C.PROGRAM_ID = P.PROGRAM_ID
	INNER JOIN CLASSROOMSTYPE CT
	ON C.CLASSROOMSTYPE_ID = CT.CLASSROOMSTYPE_ID
	INNER JOIN LOCATION l
	ON C.LOCATION_ID=L.LOCATION_ID
	INNER JOIN HEADQUARTERS h
	ON l.HEADQUARTERS_ID=h.HEADQUARTERS_ID
	WHERE C.DELETED = 1;

END;
GO

--to get classroom by code
CREATE PROCEDURE SP_GETCLASSROOM
@ID NUMERIC
AS
BEGIN
	SELECT C.CLASSROOM_ID,C.NUM_ROOM,C.SIZE,C.PROGRAM_ID, P.NAME,C.CLASSROOMSTYPE_ID, CT.DESCRIPTION,C.LOCATION_ID,l.HEADQUARTERS_ID,h.NAME,L.BUILDING,L.MODULE ,C.STATE 
	FROM CLASSROOM C INNER JOIN PROGRAM P
	ON C.PROGRAM_ID = P.PROGRAM_ID
	INNER JOIN CLASSROOMSTYPE CT
	ON C.CLASSROOMSTYPE_ID = CT.CLASSROOMSTYPE_ID
	INNER JOIN LOCATION l
	ON C.LOCATION_ID=L.LOCATION_ID
	INNER JOIN HEADQUARTERS h
	ON l.HEADQUARTERS_ID=h.HEADQUARTERS_ID
	WHERE C.CLASSROOM_ID = @ID AND
	C.DELETED = 1; 
END;
GO

--to get all classroom active
CREATE PROCEDURE SP_GETALLCLASSROOMACTIVE
AS
Begin
	SELECT C.CLASSROOM_ID,C.NUM_ROOM,C.SIZE,C.PROGRAM_ID, P.NAME,C.CLASSROOMSTYPE_ID, CT.DESCRIPTION,C.LOCATION_ID,l.HEADQUARTERS_ID,h.NAME,L.BUILDING,L.MODULE ,C.STATE 
	FROM CLASSROOM C INNER JOIN PROGRAM P
	ON C.PROGRAM_ID = P.PROGRAM_ID
	INNER JOIN CLASSROOMSTYPE CT
	ON C.CLASSROOMSTYPE_ID = CT.CLASSROOMSTYPE_ID
	INNER JOIN LOCATION l
	ON C.LOCATION_ID=L.LOCATION_ID
	INNER JOIN HEADQUARTERS h
	ON l.HEADQUARTERS_ID=h.HEADQUARTERS_ID
	WHERE C.STATE = 1 AND
	C.DELETED = 1;
END;
GO

--to get all classroom desactive
CREATE PROCEDURE SP_GETALLCLASSROOMDESACTIVE
AS
BEGIN
	SELECT C.CLASSROOM_ID,C.NUM_ROOM,C.SIZE,C.PROGRAM_ID, P.NAME,C.CLASSROOMSTYPE_ID, CT.DESCRIPTION,C.LOCATION_ID,l.HEADQUARTERS_ID,h.NAME,L.BUILDING,L.MODULE ,C.STATE 
	FROM CLASSROOM C INNER JOIN PROGRAM P
	ON C.PROGRAM_ID = P.PROGRAM_ID
	INNER JOIN CLASSROOMSTYPE CT
	ON C.CLASSROOMSTYPE_ID = CT.CLASSROOMSTYPE_ID
	INNER JOIN LOCATION l
	ON C.LOCATION_ID=L.LOCATION_ID
	INNER JOIN HEADQUARTERS h
	ON l.HEADQUARTERS_ID=h.HEADQUARTERS_ID
	WHERE C.STATE = 0 AND
	C.DELETED = 1;
END;
GO

--OBTIENE LAS AULAS DE LOS PROGRAMAS
--drop procedure SP_GETALLCLASSROOMBYPROGRAM
CREATE PROCEDURE SP_GETALLCLASSROOMBYPROGRAM
@PROGRAM_ID NUMERIC
AS
BEGIN
	SELECT C.CLASSROOM_ID,C.NUM_ROOM,C.SIZE,C.PROGRAM_ID, P.NAME,C.CLASSROOMSTYPE_ID, CT.DESCRIPTION,C.LOCATION_ID,l.HEADQUARTERS_ID,h.NAME,L.BUILDING,L.MODULE ,C.STATE 
	FROM CLASSROOM C INNER JOIN PROGRAM P
	ON C.PROGRAM_ID = P.PROGRAM_ID
	INNER JOIN CLASSROOMSTYPE CT
	ON C.CLASSROOMSTYPE_ID = CT.CLASSROOMSTYPE_ID
	INNER JOIN LOCATION l
	ON C.LOCATION_ID=L.LOCATION_ID
	INNER JOIN HEADQUARTERS h
	ON l.HEADQUARTERS_ID=h.HEADQUARTERS_ID
	WHERE  C.PROGRAM_ID=@PROGRAM_ID AND
	C.DELETED = 1;
END;
GO
/* ---- End Classroom Procedures ---- */